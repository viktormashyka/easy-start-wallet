{"version":3,"file":"static/js/237.645c400b.chunk.js","mappings":"gRAgCMA,EAAU,CACd,CAAEC,KAAKC,EAAAA,EAAAA,MAAUC,MAAO,SAAUC,MAAO,UACzC,CAAEH,KAAKC,EAAAA,EAAAA,MAAUC,MAAO,aAAcC,MAAO,eAGzCC,EAAgB,CACpBC,SAAU,GACVC,YAAa,GACbC,IAAK,IAGDC,EAASC,EAAAA,KAAaC,MAAM,CAChCL,SAAUI,EAAAA,KAAaE,SAAS,mBAChCL,YAAaG,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIF,SAAS,4BAClDJ,IAAKE,EAAAA,GAAW,6BACbK,SAAS,uBACTH,SAAS,eAGRI,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,SAAC,KAAD,UAAoBA,GAAxB,GAGpB,EAgID,UA9HmB,WACjB,IAAMC,GAAWC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAOC,MAASC,OAAO,cAM7B,OACE,+BACE,SAAC,KAAD,CACErB,cAAeA,EACfsB,iBAAkBlB,EAClBmB,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBR,GACES,EAAAA,EAAAA,KAAe,kBACVF,GADS,IAEZG,iBAAkB,SAClBR,KAAAA,MAIJM,GACD,EAbH,SAeG,YASM,IARLD,EAQI,EARJA,OACAI,EAOI,EAPJA,OACAC,EAMI,EANJA,QACAC,EAKI,EALJA,aACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,cACAR,EACI,EADJA,UAEA,OACE,UAAC,KAAD,CAASF,SAAUQ,EAAnB,WACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,IAAD,CAASZ,KAAMA,OAEjB,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEe,GAAG,QACHC,KAAK,OACLC,GAAG,cACHxB,KAAK,cACLyB,YAAY,cACZC,SAAUR,EACVhC,MAAO0B,EAAOtB,eAEhB,SAAC,IAAD,CACEU,KAAK,WACLwB,GAAG,WACHzC,QAASA,EACTG,MAAO0B,EAAOvB,SACdkC,KAAK,WACLI,SAAUP,EACVQ,UAAWR,EACXM,SAAU,SAAAd,GAAM,OACdS,EAAc,WAAYT,EAAO1B,MADnB,QAKpB,UAAC,KAAD,YACE,4BACE,SAAC,KAAD,CACEoC,GAAG,QACHC,KAAK,SACLC,GAAG,MACHxB,KAAK,MACL6B,QAAQ,qCACRC,MAAM,iDACNL,YACEtB,EAAS4B,MAAQ,IAAM,QAAU,WAEnCL,SAAUR,EACVhC,MAAO0B,EAAOrB,OAEhB,SAAC,KAAD,UACGyB,EAAO1B,aAAe2B,EAAQ3B,aAC7B,SAACS,EAAD,CAAWC,KAAK,cAAcgC,UAAU,MACtChB,EAAO3B,UAAY4B,EAAQ5B,UAC7B,SAACU,EAAD,CAAWC,KAAK,WAAWgC,UAAU,MACnChB,EAAOzB,KAAO0B,EAAQ1B,KACxB,SAACQ,EAAD,CAAWC,KAAK,MAAMgC,UAAU,MAC9B,WAGR,SAAC,KAAD,WACE,SAAC,KAAD,eAKPZ,GACC,SAAC,IAAD,KAEA,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWG,KAAK,SAASI,SAAUP,EAAnC,sBAIF,SAAC,KAAD,WACE,SAAC,KAAD,CACEG,KAAK,QACLU,QAASpB,EACTc,SAAUP,EAHZ,0BAYX,KAIR,C","sources":["components/IncomeForm/IncomeForm.jsx"],"sourcesContent":["import * as Yup from 'yup';\nimport moment from 'moment';\nimport { nanoid } from 'nanoid';\nimport { Formik, ErrorMessage } from 'formik';\nimport useScreenResizing from '../../hooks/useScreenResizing';\nimport { useDispatch } from 'react-redux';\nimport {\n  addTransaction,\n  // getAllTransactions //!\n} from '../../redux/transaction/transactionOperations';\nimport { CustomSelect } from '../CustomSelect/CustomSelect';\nimport { DataBox } from '../DataBox/DataBox';\nimport { Loader } from '../Loader/Loader';\nimport {\n  InputField,\n  FormBox,\n  FormInputWrapper,\n  SecondaryInputWrapper,\n  DataWrapper,\n  CalculatorIcon,\n  TextSecondary,\n  BtnSubmitList,\n  BtnSubmitItem,\n  BtnSubmit,\n  BtnSecondary,\n  InputsBox,\n  FormTopWrapper,\n  IconWrapper,\n  ErrorNotification,\n  ErrorMessageWrapper,\n} from '../ExpensesForm/ExpensesForm.styled';\n\nconst options = [\n  { key: nanoid(), value: 'Salary', label: 'Salary' },\n  { key: nanoid(), value: 'Add.Income', label: 'Add.Income' },\n];\n\nconst initialValues = {\n  category: '',\n  description: '',\n  sum: '',\n};\n\nconst schema = Yup.object().shape({\n  category: Yup.string().required('Select category'),\n  description: Yup.string().min(3).max(20).required('Enter income description'),\n  sum: Yup.number('Invalid sum, only numbers')\n    .positive('Only positive value')\n    .required('Enter sum'),\n});\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorNotification>{message}</ErrorNotification>}\n    />\n  );\n};\n\nconst IncomeForm = () => {\n  const viewPort = useScreenResizing();\n  const dispatch = useDispatch();\n\n  const date = moment().format('DD.MM.YYYY');\n\n  // const getFormData = values => {\n  //   console.log('getFormData::', values);\n  // };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={(values, { resetForm }) => {\n          dispatch(\n            addTransaction({\n              ...values,\n              transactionsType: 'income',\n              date,\n            })\n          );\n          // dispatch(getAllTransactions()); //!\n          resetForm();\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n          setFieldValue,\n          resetForm,\n        }) => {\n          return (\n            <FormBox onSubmit={handleSubmit}>\n              <FormTopWrapper>\n                <DataWrapper>\n                  <DataBox date={date} />\n                </DataWrapper>\n                <InputsBox>\n                  <FormInputWrapper>\n                    <InputField\n                      as=\"input\"\n                      type=\"text\"\n                      id=\"description\"\n                      name=\"description\"\n                      placeholder=\"Description\"\n                      onChange={handleChange}\n                      value={values.description}\n                    />\n                    <CustomSelect\n                      name=\"category\"\n                      id=\"category\"\n                      options={options}\n                      value={values.category}\n                      type=\"Category\"\n                      disabled={isSubmitting}\n                      isLoading={isSubmitting}\n                      onChange={values =>\n                        setFieldValue('category', values.value)\n                      }\n                    ></CustomSelect>\n                  </FormInputWrapper>\n                  <SecondaryInputWrapper>\n                    <div>\n                      <TextSecondary\n                        as=\"input\"\n                        type=\"number\"\n                        id=\"sum\"\n                        name=\"sum\"\n                        pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                        title=\"Sum must be whole numbers (or decimal numbers)\"\n                        placeholder={\n                          viewPort.width > 767 ? '00.00' : '00.00UAH'\n                        }\n                        onChange={handleChange}\n                        value={values.sum}\n                      />\n                      <ErrorMessageWrapper>\n                        {errors.description && touched.description ? (\n                          <FormError name=\"description\" component=\"p\" />\n                        ) : errors.category && touched.category ? (\n                          <FormError name=\"category\" component=\"p\" />\n                        ) : errors.sum && touched.sum ? (\n                          <FormError name=\"sum\" component=\"p\" />\n                        ) : null}\n                      </ErrorMessageWrapper>\n                    </div>\n                    <IconWrapper>\n                      <CalculatorIcon />\n                    </IconWrapper>\n                  </SecondaryInputWrapper>\n                </InputsBox>\n              </FormTopWrapper>\n              {isSubmitting ? (\n                <Loader />\n              ) : (\n                <BtnSubmitList>\n                  <BtnSubmitItem>\n                    <BtnSubmit type=\"submit\" disabled={isSubmitting}>\n                      Input\n                    </BtnSubmit>\n                  </BtnSubmitItem>\n                  <BtnSubmitItem>\n                    <BtnSecondary\n                      type=\"reset\"\n                      onClick={resetForm}\n                      disabled={isSubmitting}\n                    >\n                      Clear\n                    </BtnSecondary>\n                  </BtnSubmitItem>\n                </BtnSubmitList>\n              )}\n            </FormBox>\n          );\n        }}\n      </Formik>\n    </>\n  );\n};\n\nexport default IncomeForm;\n"],"names":["options","key","nanoid","value","label","initialValues","category","description","sum","schema","Yup","shape","required","min","max","positive","FormError","name","render","message","viewPort","useScreenResizing","dispatch","useDispatch","date","moment","format","validationSchema","onSubmit","values","resetForm","addTransaction","transactionsType","errors","touched","handleChange","handleSubmit","isSubmitting","setFieldValue","as","type","id","placeholder","onChange","disabled","isLoading","pattern","title","width","component","onClick"],"sourceRoot":""}