{"version":3,"file":"static/js/628.3dd17388.chunk.js","mappings":"uOAGaA,EAAYC,EAAAA,GAAAA,IAAH,kjBA6BTC,GAAQD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,oZAsBLG,EAAcH,EAAAA,GAAAA,EAAH,gcAoBXI,EAAIJ,EAAAA,GAAAA,EAAH,0SAeDK,EAASL,EAAAA,GAAAA,OAAH,ocAsBNM,EAAMN,EAAAA,GAAAA,IAAH,yKAQHO,EAAQP,EAAAA,GAAAA,IAAH,+CAGLQ,EAAYR,EAAAA,GAAAA,EAAH,qKASTS,EAAOT,EAAAA,GAAAA,KAAH,gHAMJU,EAAcV,EAAAA,GAAAA,OAAH,+V,qECrHlBW,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,SAAS,oBACpDC,SAAUJ,EAAAA,KAAaK,IAAI,GAAGC,IAAI,IAAIH,SAAS,yBAE3CI,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,SAACd,EAAD,UAAYc,GAAhB,GAGpB,EAIYC,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAChDhB,EAAQY,EAAUK,IAAI,SACtBf,EAAWU,EAAUK,IAAI,aAC/BC,EAAAA,EAAAA,YAAU,WAEJlB,GACFU,GAASS,EAAAA,EAAAA,IAAM,CAAEnB,MAAAA,EAAOE,SAAAA,IAE3B,GAAE,CAACQ,EAAUV,EAAOE,IAWrB,OACE,UAACjB,EAAD,YACE,SAACK,EAAD,wDACA,SAACD,EAAD,CAAa+B,KAAK,0CAAlB,UACE,SAAC,IAAD,OAGF,SAAC9B,EAAD,yEACA,SAAC,KAAD,CACE+B,cAAe,CAAErB,MAAO,GAAIE,SAAU,IACtCoB,iBAAkBzB,EAClB0B,SApBe,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UAG7Bf,GAASS,EAAAA,EAAAA,IAAMK,IAEfC,GACD,EAWG,SAKG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,UAAC,KAAD,CAAMC,aAAa,MAAnB,WACE,mBAAOC,QAAQ,QAAQC,MAAO,CAAEC,SAAU,YAA1C,UACGL,EAAO1B,OAAS2B,EAAQ3B,OAAQ,SAACL,EAAD,gBAAiB,KADpD,WAEE,UAACF,EAAD,YACE,SAACN,EAAD,CAAO6C,KAAK,QAAQ1B,KAAK,QAAQ2B,YAAY,mBAC7C,SAAC5B,EAAD,CAAWC,KAAK,QAAQ4B,UAAU,eAItC,SAACzC,EAAD,WACE,mBAAOoC,QAAQ,WAAf,UACGH,EAAOxB,UAAYyB,EAAQzB,UAAW,SAACP,EAAD,gBAAiB,KAAM,IADhE,aAGE,SAACR,EAAD,CACE6C,KAAK,WACL1B,KAAK,WACL2B,YAAY,uBAEd,SAAC5B,EAAD,CACEC,KAAK,WACLwB,MAAO,CAAEC,SAAU,WAAYI,OAAQ,EAAGC,KAAM,WAItD,UAAC5C,EAAD,YACE,SAACI,EAAD,CAAaoC,KAAK,SAAlB,qBACA,SAAC,KAAD,CAAMK,GAAG,YAAT,UACE,SAAC9C,EAAD,CAAQyC,KAAK,SAAb,iCA5BP,MAoCR,E,UCrGc,SAASM,IACtB,OACE,iCACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAACC,EAAA,EAAD,WACE,SAAC/B,EAAD,QAIP,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field } from 'formik';\n\nexport const Container = styled.div`\n  @media screen and (min-width: 768px) {\n    width: 426px;\n    height: 552px;\n    padding: 56px 83px 56px 83px;\n  }\n  padding: 40px 29px 40px 29px;\n\n  width: 280px;\n  height: 496px;\n  margin: auto;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  font-size: 12px;\n  color: #010101;\n  flex-direction: column;\n  border: 2px solid white;\n  border-radius: 30px;\n  box-shadow: 0px 10px 60px rgba(170, 178, 197, 0.2);\n\n  font-family: 'Roboto';\n  font-style: normal;\n\n  background-color: #ffffff;\n`;\n\nexport const Input = styled(Field)`\n@media screen and (max-width: 767px) {\n    width: 240px;\n   margin-bottom: 20px; \n  }\n \n  width: 258.92px;\n  height: 52px;\n  font-size: 12px;\n  margin-bottom: 32px;\n  margin-top: 12px;\n  display: flex;\n  padding-left: 19.54px;\n  \n  border-radius: 30px;\n  background: #f6f7fb;\n  border-style: none;\n  border: none;\n   &: hover,  &:focus {\n    border:  non;\n  }\n`;\nexport const ButtonGoogl = styled.a`\n  justify-content: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 32px;\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  background-color: #f6f7fb;\n  border-radius: 26px;\n  border: 0;\n  padding: 10px 18px 10px 20px;\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 14px;\n  text-align: center;\n  letter-spacing: 0.02em;\n  color: #000000;\n`;\nexport const P = styled.p`\n  @media screen and (min-width: 767px) {\n    max-width: 222px;\n    margin-bottom: 16px;\n    padding-right: 8px;\n    padding-left: 8px;\n  }\n\n  margin-bottom: 20px;\n  font-size: 12px;\n  line-height: 14px;\n  max-width: 210px;\n  max-height: 28px;\n  color: #52555f;\n`;\nexport const Button = styled.button`\n @media screen and (max-width: 767px) {\n    width: 116px;\n  }\n  width: 122.17px;\n  height: 44px;\n  background: #f5f6fb;\n  border-radius: 16px;\n  border-style: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #52555f;\n  font-weight: 700;\n  cursor: pointer;\n  &: hover,  &:focus {\n    background: #ff751d;\n    color: #ffffff;\n    // border-style: none;\n    border: none;\n  } ;\n`;\nexport const Div = styled.div`\n  @media screen and (min-width: 768px) {\n    padding-top: 8px;\n  }\n  display: flex;\n  padding-top: 20px;\n  justify-content: space-between;\n`;\nexport const Block = styled.div`\n  position: relative;\n`;\nexport const ErrorText = styled.p`\n  color: #eb5757;\n  position: absolute;\n  bottom: -18px;\n  left: 0;\n  font-size: 10px;\n  line-height: 12px;\n  letter-spacing: 0.04em;\n`;\nexport const Span = styled.span`\n  color: #eb5757;\n  font-size: 12px;\n  line-height: 14px;\n  letter-spacing: 0.04em;\n`;\nexport const LoginButton = styled.button`\n  @media screen and (max-width: 767px) {\n    width: 116px;\n  }\n  width: 122.17px;\n  height: 44px;\n\n  border-radius: 16px;\n  border-style: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  font-weight: 700;\n  cursor: pointer;\n  background: #ff751d;\n  color: #ffffff;\n\n  border: none;\n`;\n","import { Formik, Form, ErrorMessage } from 'formik';\nimport {\n  Button,\n  ButtonGoogl,\n  Container,\n  Div,\n  Input,\n  P,\n  ErrorText,\n  LoginButton,\n  Span,\n  Block,\n} from './LoginForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { ReactComponent as GoogleSvg } from 'images/google.svg';\n\nimport { logIn } from 'redux/auth/authOperations';\nimport { Link } from 'react-router-dom';\nimport { useEffect } from 'react';\nconst schema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Enter your email'),\n  password: Yup.string().min(8).max(20).required('Enter your password'),\n});\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\n// console.log('LoginForm ---> start'); //!\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const urlParams = new URLSearchParams(window.location.search);\n  const email = urlParams.get('email');\n  const password = urlParams.get('password');\n  useEffect(() => {\n    // console.log('LoginForm ---> value:', { email, password });\n    if (email) {\n      dispatch(logIn({ email, password }));\n    }\n  }, [dispatch, email, password]);\n\n  const handleSubmit = (value, { resetForm }) => {\n    // console.log('LoginForm ---> handleSubmit'); //!\n    // console.log('LoginForm ---> value:', value); //!\n    dispatch(logIn(value));\n\n    resetForm();\n  };\n\n  // console.log('LoginForm ---> render'); //!\n  return (\n    <Container>\n      <P>You can log in with your Google Account:</P>\n      <ButtonGoogl href=\"http://localhost:3033/api/users/google/\">\n        <GoogleSvg />\n      </ButtonGoogl>\n\n      <P>Or log in using an email and password, after registering:</P>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched }) => (\n          <Form autoComplete=\"off\">\n            <label htmlFor=\"login\" style={{ position: 'relative' }}>\n              {errors.email && touched.email ? <Span>*</Span> : null} Email:\n              <Block>\n                <Input type=\"email\" name=\"email\" placeholder=\"Email address\" />\n                <FormError name=\"email\" component=\"div\" />\n              </Block>\n            </label>\n\n            <Block>\n              <label htmlFor=\"password\">\n                {errors.password && touched.password ? <Span>*</Span> : null}{' '}\n                Password:\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Security password\"\n                />\n                <FormError\n                  name=\"password\"\n                  style={{ position: 'absolute', bottom: 0, left: 0 }}\n                />\n              </label>\n            </Block>\n            <Div>\n              <LoginButton type=\"submit\">LOG IN</LoginButton>\n              <Link to=\"/register\">\n                <Button type=\"button\">REGISTRATION</Button>\n              </Link>\n            </Div>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Main } from '../components/Main/Main';\n\nexport default function Login() {\n  return (\n    <>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <Main>\n        <LoginForm />\n      </Main>\n    </>\n  );\n}\n"],"names":["Container","styled","Input","Field","ButtonGoogl","P","Button","Div","Block","ErrorText","Span","LoginButton","schema","Yup","shape","email","required","password","min","max","FormError","name","render","message","LoginForm","dispatch","useDispatch","urlParams","URLSearchParams","window","location","search","get","useEffect","logIn","href","initialValues","validationSchema","onSubmit","value","resetForm","errors","touched","autoComplete","htmlFor","style","position","type","placeholder","component","bottom","left","to","Login","Helmet","Main"],"sourceRoot":""}